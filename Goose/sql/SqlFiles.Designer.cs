//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Goose.sql {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SqlFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SqlFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Goose.sql.SqlFiles", typeof(SqlFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --DROP TABLE bank_items;
        ///CREATE TABLE bank_items (
        ///  npc_id INT NOT NULL,
        ///  player_id INT NOT NULL,
        ///  serialized_data TEXT NOT NULL,
        ///  
        ///  PRIMARY KEY(npc_id, player_id)
        ///);
        ///
        ///CREATE INDEX bank_items_player_id_idx ON bank_items (player_id);.
        /// </summary>
        internal static string banks {
            get {
                return ResourceManager.GetString("banks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS classes;
        ///CREATE TABLE classes (
        ///  class_id INTEGER PRIMARY KEY,
        ///  class_name TEXT NOT NULL,
        ///  ac_multiplier DECIMAL(9,2) DEFAULT 1 NOT NULL,
        ///  vita_cost BIGINT DEFAULT 200000 NOT NULL,
        ///  mana_cost BIGINT DEFAULT 200000 NOT NULL
        ///);
        ///
        ///INSERT INTO classes (class_id, class_name, ac_multiplier, vita_cost, mana_cost) VALUES (1, &apos;Commoner&apos;, 1, 10000, 10000);
        ///INSERT INTO classes (class_id, class_name, ac_multiplier, vita_cost, mana_cost) VALUES (2, &apos;Rogue&apos;, 0.65, 150000, 150000);
        ///INSE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string classes {
            get {
                return ResourceManager.GetString("classes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS combination_item_required;
        ///CREATE TABLE combination_item_required (
        ///	combination_id INT NOT NULL,
        ///	item_template_id INT NOT NULL
        ///);
        ///
        ///DROP TABLE IF EXISTS combination_item_results;
        ///CREATE TABLE combination_item_results (
        ///	combination_id INT NOT NULL,
        ///	item_template_id INT NOT NULL
        ///);
        ///
        ///DROP TABLE IF EXISTS combinations;
        ///CREATE TABLE combinations (
        ///	combination_id INTEGER PRIMARY KEY,
        ///	combination_name VARCHAR(64) NOT NULL,
        ///	min_level INT DEFAULT 1 NOT NULL,
        ///	max_level INT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string combinations {
            get {
                return ResourceManager.GetString("combinations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE guilds (
        ///  guild_id INTEGER PRIMARY KEY,
        ///  guild_name TEXT NOT NULL,
        ///  guild_motd TEXT DEFAULT &apos;&apos; NOT NULL
        ///);
        ///
        ///CREATE TABLE guild_members (
        ///	guild_id INT NOT NULL,
        ///	player_id INT NOT NULL,
        ///	guild_rank SMALLINT DEFAULT 1 NOT NULL,
        ///
        ///	PRIMARY KEY (guild_id, player_id)
        ///);
        ///
        ///CREATE INDEX guild_members_guild_id_idx ON guild_members(guild_id); -- not currently active, could be dodgy since DB contains multiple values for guild_id, player_id already which violates the index
        ///.
        /// </summary>
        internal static string guilds {
            get {
                return ResourceManager.GetString("guilds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS item_templates;
        ///CREATE TABLE item_templates (
        ///  item_template_id INTEGER PRIMARY KEY,
        ///  item_usetype SMALLINT NOT NULL,
        ///  item_name TEXT NOT NULL,
        ///  item_description TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  player_hp INT DEFAULT 0 NOT NULL,
        ///  player_mp INT DEFAULT 0 NOT NULL,
        ///  player_sp INT DEFAULT 0 NOT NULL,
        ///  stat_ac SMALLINT DEFAULT 0 NOT NULL,
        ///  stat_str SMALLINT DEFAULT 0 NOT NULL,
        ///  stat_sta SMALLINT DEFAULT 0 NOT NULL,
        ///  stat_dex SMALLINT DEFAULT 0 NOT NULL,
        ///  stat_int SMALLINT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string items {
            get {
                return ResourceManager.GetString("items", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE logs (
        ///  text TEXT, 
        ///  log_type INT NOT NULL, 
        ///  playerid INT NOT NULL, 
        ///  otherid INT, 
        ///  mapid SMALLINT, 
        ///  mapx SMALLINT, 
        ///  mapy SMALLINT,
        ///  log_date DATETIME2 NOT NULL
        ///);.
        /// </summary>
        internal static string logs {
            get {
                return ResourceManager.GetString("logs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS maps;
        ///CREATE TABLE maps (
        ///  map_id INTEGER PRIMARY KEY,
        ///  map_name TEXT NOT NULL,
        ///  map_filename TEXT NOT NULL,
        ///  map_x SMALLINT DEFAULT 100 NOT NULL,
        ///  map_y SMALLINT DEFAULT 100 NOT NULL,
        ///  
        ///  min_level SMALLINT DEFAULT 0 NOT NULL,
        ///  max_level SMALLINT DEFAULT 0 NOT NULL,
        ///  min_experience BIGINT DEFAULT 0 NOT NULL,
        ///  max_experience BIGINT DEFAULT 0 NOT NULL,
        ///  
        ///  pvp_enabled CHAR(1) DEFAULT &apos;0&apos; NOT NULL,
        ///  chat_enabled CHAR(1) DEFAULT &apos;1&apos; NOT NULL,
        ///  auction_enabled CHA [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string maps {
            get {
                return ResourceManager.GetString("maps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS npc_templates;
        ///CREATE TABLE npc_templates (
        ///  npc_id INTEGER PRIMARY KEY,
        ///  npc_type SMALLINT DEFAULT 2 NOT NULL,
        ///  npc_name TEXT NOT NULL,
        ///  npc_title TEXT DEFAULT &apos; &apos; NOT NULL,
        ///  npc_surname TEXT DEFAULT &apos; &apos; NOT NULL,
        ///  respawn_time INT DEFAULT 0 NOT NULL,
        ///  npc_facing SMALLINT DEFAULT 3 NOT NULL,
        ///  npc_level SMALLINT DEFAULT 1 NOT NULL,
        ///  experience BIGINT DEFAULT 0 NOT NULL,
        ///  aggro_range SMALLINT DEFAULT 0 NOT NULL,
        ///  attack_range SMALLINT DEFAULT 0 NOT NULL,
        ///  attack_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string npcs {
            get {
                return ResourceManager.GetString("npcs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE IllutiaGoose;
        ///
        ///
        ///CREATE INDEX inventory_player_id_idx ON inventory (player_id);
        ///CREATE INDEX equipped_player_id_idx ON equipped (player_id);
        ///CREATE INDEX combinebag_player_id_idx ON combinebag (player_id);
        ///CREATE INDEX spellbook_player_id_idx ON spellbook (player_id);
        ///
        ///ALTER TABLE inventory ADD PRIMARY KEY CLUSTERED (player_id ASC, slot ASC);
        ///ALTER TABLE equipped ADD PRIMARY KEY CLUSTERED (player_id ASC, slot ASC);
        ///ALTER TABLE combinebag ADD PRIMARY KEY CLUSTERED (player_id ASC, slot ASC);
        ///ALT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string onetimeupdates {
            get {
                return ResourceManager.GetString("onetimeupdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE paypal_logs (
        ///  request TEXT NOT NULL
        ///);
        ///
        ///CREATE TABLE paypal_payments (
        ///  txn_id TEXT NOT NULL,
        ///  player_name TEXT NOT NULL, 
        ///  credits SMALLINT NOT NULL, 
        ///  price DECIMAL(5, 2) NOT NULL, 
        ///  redeemed CHAR(1) DEFAULT &apos;0&apos; NOT NULL,
        ///  
        ///  PRIMARY KEY (txn_id)
        ///);.
        /// </summary>
        internal static string paypal {
            get {
                return ResourceManager.GetString("paypal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS pets;
        ///CREATE TABLE pets (
        ///  pet_id INT PRIMARY KEY,
        ///  owner_id INT NOT NULL,
        ///  pet_name TEXT NOT NULL,
        ///  pet_title TEXT DEFAULT &apos; &apos; NOT NULL,
        ///  pet_surname TEXT DEFAULT &apos; &apos; NOT NULL,
        ///  respawn_time INT DEFAULT 0 NOT NULL,
        ///  next_respawn_time BIGINT DEFAULT 0 NOT NULL,
        ///  pet_facing SMALLINT DEFAULT 3 NOT NULL,
        ///  pet_level SMALLINT DEFAULT 1 NOT NULL,
        ///  experience BIGINT DEFAULT 0 NOT NULL,
        ///  experience_sold BIGINT DEFAULT 0 NOT NULL,
        ///  aggro_range SMALLINT DEFAULT 0 NOT NULL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string pets {
            get {
                return ResourceManager.GetString("pets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CREATE TABLE players (
        ///  player_id INT PRIMARY KEY,
        ///  player_name TEXT NOT NULL,
        ///  player_title TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  player_surname TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  password_hash TEXT NOT NULL,
        ///  password_salt TEXT NOT NULL,
        ///  access_status SMALLINT DEFAULT 2 NOT NULL,
        ///  map_id SMALLINT DEFAULT 1 NOT NULL,
        ///  map_x SMALLINT DEFAULT 50 NOT NULL,
        ///  map_y SMALLINT DEFAULT 50 NOT NULL,
        ///  player_facing SMALLINT DEFAULT 2 NOT NULL,
        ///  bound_id SMALLINT DEFAULT 1 NOT NULL,
        ///  bound_x SMALLINT DEFAULT 5 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string players {
            get {
                return ResourceManager.GetString("players", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS quests;
        ///CREATE TABLE quests (
        ///  id INTEGER PRIMARY KEY,
        ///  name TEXT NOT NULL,
        ///  description TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  fail_text TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  pass_text TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  min_experience BIGINT DEFAULT 0,
        ///  max_experience BIGINT DEFAULT 0,
        ///  min_level INT DEFAULT 0,
        ///  max_level INT DEFAULT 0,
        ///  repeatable CHAR(1) DEFAULT &apos;0&apos;,
        ///  show_progress CHAR(1) DEFAULT &apos;0&apos;,
        ///  only_one_player_can_complete CHAR(1) DEFAULT &apos;0&apos;,
        ///  prerequisite_quests TEXT DEFAULT &apos; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string quests {
            get {
                return ResourceManager.GetString("quests", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS spells;
        ///CREATE TABLE spells (
        ///  spell_id INTEGER PRIMARY KEY,
        ///  spell_name TEXT NOT NULL,
        ///  spell_description TEXT DEFAULT &apos;&apos; NOT NULL,
        ///  spell_target INT NOT NULL,
        ///  class_restrictions BIGINT DEFAULT 0 NOT NULL, /* if bit not set class id can cast */
        ///  spell_aether BIGINT DEFAULT 100 NOT NULL, /* Aether in milliseconds */
        ///  spellbook_graphic INT NOT NULL,
        ///  spellbook_graphic_file INT NOT NULL,
        ///  
        ///  hp_static_cost INT DEFAULT 0 NOT NULL,
        ///  hp_percent_cost DECIMAL(9,4) DEFAUL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string spells {
            get {
                return ResourceManager.GetString("spells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS warptiles;
        ///CREATE TABLE warptiles (
        ///  map_id SMALLINT NOT NULL,
        ///  map_x SMALLINT NOT NULL,
        ///  map_y SMALLINT NOT NULL,
        ///  warp_id SMALLINT NOT NULL,
        ///  warp_x SMALLINT NOT NULL,
        ///  warp_y SMALLINT NOT NULL
        ///);
        ///
        ///CREATE INDEX warptiles_map_id_idx ON warptiles(map_id);.
        /// </summary>
        internal static string warptiles {
            get {
                return ResourceManager.GetString("warptiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DROP TABLE IF EXISTS wordfilter;
        ///
        ///CREATE TABLE wordfilter (
        ///  word TEXT NOT NULL,
        ///  filtered TEXT NOT NULL
        ///);
        ///
        ////*INSERT INTO wordfilter VALUES (&apos;raped&apos;, &apos;*****&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;rapes&apos;, &apos;*****&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;rape&apos;, &apos;****&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;raping&apos;, &apos;******&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;fuck&apos;, &apos;****&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;nigger&apos;, &apos;******&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;nigga&apos;, &apos;*****&apos;);
        ///INSERT INTO wordfilter VALUES (&apos;cun [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string wordfilter {
            get {
                return ResourceManager.GetString("wordfilter", resourceCulture);
            }
        }
    }
}
